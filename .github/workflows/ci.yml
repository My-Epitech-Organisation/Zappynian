# Zappy CI Workflow
name: Zappy CI

on:
  push:
    branches: [ "main", "master", "dev" ]
    paths-ignore: [ "**/*.md", "docs/**" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  BUILD_DIR: build
  CCACHE_DIR: ~/.ccache
  CTEST_OUTPUT_ON_FAILURE: 1

defaults:
  run:
    shell: bash

jobs:
  check-prerequisites:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Display toolchain versions
        run: |
          echo "gcc:   $(gcc --version | head -1)"
          echo "g++:   $(g++ --version | head -1)"
          echo "make:  $(make --version | head -1)"

      - name: Check project structure
        run: |
          echo "Checking project structure..."

          # Check for required files and directories
          [ -f "Makefile" ] || { echo "❌ Missing Makefile"; exit 1; }
          [ -d "server" ] || { echo "❌ Missing server directory"; exit 1; }
          [ -d "gui" ] || { echo "❌ Missing gui directory"; exit 1; }
          [ -d "ai" ] || { echo "❌ Missing ai directory"; exit 1; }
          [ -d "libzappy_net" ] || { echo "❌ Missing libzappy_net directory"; exit 1; }

          # Check for makefiles in each component
          [ -f "server/Makefile" ] || { echo "❌ Missing server Makefile"; exit 1; }
          [ -f "gui/Makefile" ] || { echo "❌ Missing gui Makefile"; exit 1; }
          [ -f "ai/Makefile" ] || { echo "❌ Missing ai Makefile"; exit 1; }
          [ -f "libzappy_net/Makefile" ] || { echo "❌ Missing libzappy_net Makefile"; exit 1; }

          echo "✅ All required project components found!"

  build:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    needs: check-prerequisites
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ubuntu-clang-ccache-${{ github.sha }}
          restore-keys: |
            ubuntu-clang-ccache-

      - name: Install build dependencies
        run: |
          apt-get update -y
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
              libsfml-dev libconfig++-dev lcov clang-tidy ccache \
              wget gnupg software-properties-common
          # clang-format 15 pour homogénéité école
          wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
          add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main"
          apt-get update -y && apt-get install -y clang-format-15
          ln -sf /usr/bin/clang-format-15 /usr/local/bin/clang-format

      - name: Check Code Formatting
        run: |
          echo "Checking code formatting..."
          # Format check is already in Makefile
          make check_normalize || echo "⚠️ Code formatting issues found, but continuing build"

      - name: Build with Makefile
        run: |
          echo "Building network library..."
          make -C libzappy_net
          echo "Building project with Makefile..."
          make

      - name: Check binaries exist
        run: |
          # Check for required binaries
          for bin in zappy_server zappy_gui zappy_ai; do
            [ -f "$bin" ] || [ -f "$BUILD_DIR/$bin" ] || [ -f "$BUILD_DIR/src/$bin" ] || { echo "❌ $bin binary not found"; exit 1; }
          done
          echo "✅ All binaries successfully built!"

          # Check for required libraries
          [ -f "libzappy_net/libzappy_net.a" ] || { echo "❌ libzappy_net.a not found"; exit 1; }
          echo "✅ Network library successfully built!"

      - name: Run tests if available
        run: |
          if grep -q "tests_run:" Makefile; then
            echo "Running tests..."
            make tests_run
          else
            echo "No tests_run target found, skipping tests"
          fi

      - name: Save updated ccache
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ubuntu-clang-ccache-${{ github.sha }}

  mirror-to-epitech:
    runs-on: ubuntu-latest
    needs: [check-prerequisites, build]
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Push to Epitech repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: git@github.com:EpitechPromo2028/B-YEP-400-NAN-4-1-zappy-paul-antoine.salmon.git
          ssh_private_key: ${{ secrets.EPITECH_SSH_KEY }}

# Concurrency control to avoid running multiple workflows on the same branch
concurrency:
  group: ${{ github.ref }}-ci
  cancel-in-progress: true
